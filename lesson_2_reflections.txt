What happens when you initialize a repository? Why do you need to do it?

It sets up the folder ready for git commits and snapshots of particular files and/or folders. It also creates a hidden .git folder where all the configuration files for adminstering the git repository is stored. The reason you need a repository so that you can version control the contents of the holder and have the ability to go to previous versions of the code if need be.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is an intermediatery stage before adding the files to the commit. It's where the differences of changes made to the tracked files are added. Whilst the working directory is all the files that are related to the folder or project, whether they are tracked by the git version control or not. The repository relates to the working directory that was initialised. This provides the user the value of being able to track and monitor particular files within a repository without needing to track every file, especially if a lot of the files do not change during development.

How can you use the staging area to make sure you have one commit per logical change?

Whenever a change has been done to the code add the relevant file then commit. Add the commit message that relates to the change that you had made and any subsequent changes to be added in a similar fashion.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

It's useful when you want to branch off by experimenting with additional features or variations of your program, or that you may have a team and each team member can work on separate branch that can later be merged back to the master.

How do the diagrams help you visualize the branch structure?

I can see the flow of the commits and how each commit is related to its parent and where the head is. It also allows me to see any unreachable commits in the project.